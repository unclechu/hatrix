{-# LANGUAGE NoImplicitPrelude #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MonoLocalBinds #-}
{-# LANGUAGE UnicodeSyntax #-}
{-# LANGUAGE ExplicitNamespaces #-}

module Hatrix.Prelude
     ( module ClassyPrelude
     , module Prelude.Unicode
     , module Data.Function
     , module Data.Functor
     , (‚Ä¢)
     , (‚óá)
     , type ùîπ
     ) where

import           ClassyPrelude hiding (newEmptyMVar, newMVar, putMVar, takeMVar, getCurrentTime)
import           Prelude.Unicode
import           Data.Function ((&))
import           Data.Functor ((<&>))


type ùîπ = Bool


-- Left-to-right composition, just like (>=>) for monads.
(‚Ä¢) ‚à∑ (Œ± ‚Üí Œ≤) ‚Üí (Œ≤ ‚Üí Œ≥) ‚Üí (Œ± ‚Üí Œ≥)
(‚Ä¢) = flip (‚àò)
{-# INLINE (‚Ä¢) #-}
infixl 9 ‚Ä¢


-- Generic concatenation
(‚óá) ‚à∑ Monoid Œ± ‚áí Œ± ‚Üí Œ± ‚Üí Œ±
(‚óá) = (<>)
{-# INLINE (‚óá) #-}
infixr 6 ‚óá
